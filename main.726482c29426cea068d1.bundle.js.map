{"version":3,"file":"main.726482c29426cea068d1.bundle.js","mappings":"0pJAAIA,EAAsB,CACtBC,UAAW,EACXC,aAAc,EACdC,kBAAmB,EACnBC,mBAAoB,EACpBC,UAAW,EACXC,SAAU,EACVC,kBAAmB,EACnBC,mBAAoB,EACpBC,YAAa,EACbC,UAAW,GACXC,kBAAmB,GACnBC,YAAa,GACbC,aAAc,GACdC,cAAe,GACfC,OAAQ,GACRC,0BAA2B,IAI/B,QAFAhB,EAAsBiB,OAAOC,OAAOlB,G,sGCDpC,SAASmB,EAAYC,GAAwB,I,IAArBC,EAAQD,EAARC,SAAUC,EAAQF,EAARE,SACmBC,G,GAAfC,EAAAA,EAAAA,WAAS,G,EAAM,E,o4BAA/BC,GAAFF,EAAA,GAAcA,EAAA,IAExBG,GAAYC,EAAAA,EAAAA,QAAO,OAGzBC,EAAAA,EAAAA,YAAU,WACN,OAAO,WACCF,EAAUG,SACVH,EAAUG,QAAQC,WAE1B,CACJ,GAAG,KAGHF,EAAAA,EAAAA,YAAU,WACN,GAAIN,EAAU,CAEVG,GAAa,GACbM,mBACA,IACQL,EAAUG,SACVH,EAAUG,QAAQC,YAEtBJ,EAAUG,QAAU,IAAIG,OACpB,IAAIC,IAAI,mBAEZP,EAAUG,QAAQK,UAAYC,EAC9BT,EAAUG,QAAQO,YAAY,CAC1BC,KAAMrC,EAAoBC,UAC1BqC,KAAM,CACFhB,SAAUA,IAGtB,CAAE,MAAOiB,GACLC,QAAQD,MAAM,+BAAgCA,EAClD,CACJ,CACJ,GAAG,CAACjB,IAMJ,IAAMa,GAAsBM,EAAAA,EAAAA,cAAY,SAACC,GAC7BA,EAAMC,KAAKN,IAIvB,GAAG,IAEH,OACIO,EAAAA,cAAAA,EAAAA,SAAA,KACKvB,EAGb,CAnEAF,EAAa0B,UAAY,CACrBxB,SAAUyB,IAAAA,OACVxB,SAAUwB,IAAAA,QAmEd,UCnEO,SAASC,IACZ,OACIH,EAAAA,cAAA,OAAKI,UAAU,oBACXJ,EAAAA,cAAA,OAAKI,UAAU,mBACfJ,EAAAA,cAAA,OAAKI,UAAU,kCACXJ,EAAAA,cAAA,OAAKI,UAAU,iBAEfJ,EAAAA,cAAA,OAAKI,UAAU,8CAGnBJ,EAAAA,cAAA,OAAKI,UAAU,yBAI3B,C,sGCTO,SAASC,IACZ,I,IAA8C1B,G,GAAdC,EAAAA,EAAAA,UAAS,M,EAAK,E,o4BAAvCF,EAAQC,EAAA,GAEf,OAF4BA,EAAA,GAGxBqB,EAAAA,cAACzB,EAAY,CAACG,SAAUA,GACpBsB,EAAAA,cAACG,EAAM,MAGnB,C,QCfaG,EAAAA,EAAAA,GAAWC,SAASC,eAAe,QAC3CC,OACDT,EAAAA,cAACA,EAAAA,WAAgB,KACbA,EAAAA,cAACK,EAAG,O","sources":["webpack://automated-system-viewer/./src/Services/CDL_WORKER_PROTOCOL.js","webpack://automated-system-viewer/./src/Providers/CDLProviders.js","webpack://automated-system-viewer/./src/Viewer/Viewer.js","webpack://automated-system-viewer/./src/App.js","webpack://automated-system-viewer/./src/index.js"],"sourcesContent":["let CDL_WORKER_PROTOCOL = {\n    LOAD_FILE: 1,\n    GET_METADATA: 2,\n    GET_POSITION_DATA: 3,\n    GET_VARIABLE_STACK: 4,\n    STEP_INTO: 5,\n    STEP_OUT: 6,\n    STEP_OVER_FORWARD: 7,\n    STEP_OVER_BACKWARD: 8,\n    GO_TO_START: 9,\n    GO_TO_END: 10,\n    TOGGLE_BREAKPOINT: 11,\n    BREAKPOINTS: 12,\n    PLAY_FORWARD: 13,\n    PLAY_BACKWARD: 14,\n    REPLAY: 15,\n    TOGGLE_BREAKPOINT_ENABLED: 16,\n};\nCDL_WORKER_PROTOCOL = Object.freeze(CDL_WORKER_PROTOCOL);\n\nexport default CDL_WORKER_PROTOCOL;\n","import React, {useCallback, useEffect, useRef, useState} from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport CDL_WORKER_PROTOCOL from \"../Services/CDL_WORKER_PROTOCOL\";\n\nCDLProviders.propTypes = {\n    children: PropTypes.object,\n    fileInfo: PropTypes.string,\n};\n\n/**\n * Provides all contexts consumed by the application.\n * @param {JSX} children\n * @param {string} fileInfo\n * @return {JSX}\n */\nfunction CDLProviders ({children, fileInfo}) {\n    const [isLoading, setIsLoading] = useState(false);\n\n    const cdlWorker = useRef(null);\n\n    // Terminate worker when component is destroyed.\n    useEffect(() => {\n        return () => {\n            if (cdlWorker.current) {\n                cdlWorker.current.terminate();\n            }\n        };\n    }, []);\n\n    // Create worker to handle file.\n    useEffect(() => {\n        if (fileInfo) {\n            // TODO: Use loading state to show loading animation.\n            setIsLoading(true);\n            initializeStates();\n            try {\n                if (cdlWorker.current) {\n                    cdlWorker.current.terminate();\n                }\n                cdlWorker.current = new Worker(\n                    new URL(\"../Services/cdlWorker.js\", import.meta.url)\n                );\n                cdlWorker.current.onmessage = handleWorkerMessage;\n                cdlWorker.current.postMessage({\n                    code: CDL_WORKER_PROTOCOL.LOAD_FILE,\n                    args: {\n                        fileInfo: fileInfo,\n                    }\n                });\n            } catch (error) {\n                console.error(\"Failed to initialize worker:\", error);\n            }\n        }\n    }, [fileInfo]);\n\n    /**\n     * Handles message from the worker.\n     * @param {object} event\n     */\n    const handleWorkerMessage = useCallback((event) => {\n        switch (event.data.code) {\n            default:\n                break;\n        }\n    }, []);\n\n    return (\n        <>\n            {children}\n        </>\n    );\n};\n\nexport default CDLProviders;\n","import React from \"react\";\n\nimport \"./Viewer.scss\";\n\n/**\n * Renders the Diagnostic Log Viewer.\n * @return {JSX.Element}\n */\nexport function Viewer () {\n    return (\n        <div className=\"viewer-container\">\n            <div className=\"menu-container\"></div>\n            <div className=\"body-container d-flex flex-row\">\n                <div className=\"d-flex h-100\">\n                </div>\n                <div className=\"d-flex flex-grow-1 h-100 overflow-hidden\">\n                </div>\n            </div>\n            <div className=\"status-bar-container\">\n            </div>\n        </div>\n    );\n}\n","import React, {useEffect, useState} from \"react\";\n\nimport CDLProviders from \"./Providers/CDLProviders\";\nimport {Viewer} from \"./Viewer/Viewer\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.scss\";\n\n/**\n * Renders the application.\n *\n * @return {JSX.Element}\n */\nexport function App () {\n    const [fileInfo, setFileInfo] = useState(null);\n\n    return (\n        <CDLProviders fileInfo={fileInfo}>\n            <Viewer/>\n        </CDLProviders>\n    );\n}\n","import React from \"react\";\n\nimport {createRoot} from \"react-dom/client\";\n\nimport {App} from \"./App\";\n\nconst root = createRoot(document.getElementById(\"app\"));\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n);\n"],"names":["CDL_WORKER_PROTOCOL","LOAD_FILE","GET_METADATA","GET_POSITION_DATA","GET_VARIABLE_STACK","STEP_INTO","STEP_OUT","STEP_OVER_FORWARD","STEP_OVER_BACKWARD","GO_TO_START","GO_TO_END","TOGGLE_BREAKPOINT","BREAKPOINTS","PLAY_FORWARD","PLAY_BACKWARD","REPLAY","TOGGLE_BREAKPOINT_ENABLED","Object","freeze","CDLProviders","_ref","children","fileInfo","_useState2","useState","setIsLoading","cdlWorker","useRef","useEffect","current","terminate","initializeStates","Worker","URL","onmessage","handleWorkerMessage","postMessage","code","args","error","console","useCallback","event","data","React","propTypes","PropTypes","Viewer","className","App","createRoot","document","getElementById","render"],"sourceRoot":""}